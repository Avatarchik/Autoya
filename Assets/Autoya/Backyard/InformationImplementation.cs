using System;
using UnityEngine;
using AutoyaFramework.Information;
using System.Collections.Generic;
using MarkdownSharp;
using System.Linq;

/*
	information implementation.
*/
namespace AutoyaFramework {
	public partial class Autoya {
		private InformationView info = new InformationView();

		/*
			public apis
		*/

		/**
			show information view which is generated by downloaded markdown data.
			then, if player touches button, link, or other items, something goes on.
		*/
		public static void Info_Show (string url, float windowWidth, float windowHeight, float anchorPos, Action<GameObject> viewAct, Action<int, string> failed) {

			Debug.Assert(0 < windowWidth, "windowWidth is 0 or negative.");
			Debug.Assert(0 < windowHeight, "windowHeight is 0 or negative.");

			var http = new Connections.HTTP.HTTPConnection();

			var view = new View(windowWidth, windowHeight, anchorPos);

			var cor = http.Get(
				Guid.NewGuid().ToString(),
				new Dictionary<string, string>(),
				url,
				(conId, code, responseHeaders, data) => {
					var mark = new Markdown();
					var html = mark.Transform(data);
					var tokenizer = new Tokenizer(html);
					var root = tokenizer.Materialize(
						"test",
						autoya.mainthreadDispatcher.Commit,
						view,
						(tag, depth, padding, kv) => {
							var depthStr = string.Join(".", depth.Select(d => d.ToString()).ToArray());
							switch (depthStr) {
								case "H": {
									padding.Adjust(2, 0, 1, 5);
									break;
								}
								default: {
									padding.Adjust(0, 0, 0, 8);
									break;
								}
							}
						},
						(go, tag, depth, kv) => {

						}
					);

					viewAct(root);
				},
				(conId, code, reason, responseHeaders) => {
					failed(code, reason);
				},
				5.0
			);

			autoya.mainthreadDispatcher.Commit(cor);			
		}
	}
}